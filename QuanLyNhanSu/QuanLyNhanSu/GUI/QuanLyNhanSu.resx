<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnXuatRaFile.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>